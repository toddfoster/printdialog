#!/bin/bash
_self="${0##*/}"

usage()
{
    cat << EOF
  Usage: $_self [-d DEST_PRINTER] [-n COPIES] [-P PAGES] [file]
  Additional optional arguments:
                -h  help (this message)
                -v  verbose (status messages to console)
EOF
}

exit_abnormal()
{
    usage
    exit 1
}

verbose=100
log_it()
{
    verbose_debug=10
    verbose_info=5
    verbose_status=1
    level=11
    if [[ $* == DEBUG* ]]; then
        level=$verbose_debug
    elif [[ $* == INFO* ]]; then
        level=$verbose_info
	elif [[ $* == STATUS* ]]; then
        level=$verbose_status
    fi

    if (( level <= verbose )); then
        printf "LOG $(date --iso-8601=seconds) | $_self | $*\n";
    fi
}

z_looks="--height=400 --width=400 --title=Print"
p_file=""
p_printer=""
p_pages=""
p_copies=""
p_layout=""
p_color=""
p_duplex=""
p_folding=""
p_booklet=""
p_papertray=""
p_presets=""
p_manual=""

menu_wip()
{
    zenity --warning --text="Feature not yet implemented."
}

menu_main_text_build()
{
    result=" File: $p_file\n"
    result="$result Dest: $p_printer\n"
    [[ $p_copies ]] && result="$result Copies: $p_copies\n"
    [[ $p_pages  ]] && result="$result Pages: $p_pages\n"
	[[ $p_manual ]] && result="$result Manual: $p_manual\n"
    echo $result
}

cmd_build()
{
    cmd_printer="-d $p_printer"
    cmd_copies=""
    cmd_pages=""
    [[ $p_copies ]] && cmd_copies="-n $p_copies"
    [[ $p_pages  ]] &&  cmd_pages="-P $p_pages"
    echo "lp $cmd_printer $cmd_pages $cmd_copies $p_manual $p_file"
}

menu_main()
{
    selection=""
    while [[ $selection != Print ]]; do
        selection=$(zenity --list $z_looks --text "$(menu_main_text_build)" --column="Menu" \
                           Print Copies Pages Presets Other Utilities )
        [[ $selection ]] || exit 0
        log_it "DEBUG $selection"
		case "$selection" in
            Copies)  menu_copies;;
            Pages)   menu_pages;;
            Presets) menu_presets;;
            Other)   menu_other;;
			Utilities) menu_utilities;;
        esac
    done
}

menu_copies()
{
    [[ $p_copies ]] || p_copies=1
    copies_default="$p_copies"
    p_copies=""
    while [[ ! $p_copies ]]; do
        p_copies=$(zenity --entry $z_looks --text="Copies:" --entry-text="$copies_default")
        [[ $p_copies ]] || { p_copies=$copies_default; return; }
        [[ $p_copies =~ ^[0-9]+$ ]] || p_copies=""
    done
}

menu_other()
{
    # TODO: come back to this menu when selection is made
    selection=$(zenity --list $z_looks --text "$(menu_main_text_build)\nOther Settings:" --column="Settings" \
                       Layout Duplex Folding Booklet Color PaperTray Manual Back )
    [[ $selection ]] || return
    log_it "DEBUG menu_other -> $selection"
    case "$selection" in
        Layout) menu_wip;;
        Duplex) menu_wip;;
        Folding) menu_wip;;
        Booklet) menu_wip;;
        Color) menu_wip;;
        PaperTray) menu_wip;;
		Manual) p_manual=$(zenity --entry $z_looks \
								   --text="Manual entry of parameters:" \
								   --entry-text="$p_manual");;
        *) return;;
    esac
}

menu_utilities()
{
    selection=$(zenity --list $z_looks --text "$(menu_main_text_build)\n Utilities:" --column="Select:" \
                       "Print Mailing" Back )
    [[ $selection ]] || return
    log_it "DEBUG menu_utilities -> $selection"
    case "$selection" in
        "Print Mailing") menu_wip;;
        *) return;;
    esac
}

menu_presets()
{
    selection=$(zenity --list $z_looks --text "$(menu_main_text_build)\nPresets:" --column="Presets" \
                       Bulletins "Scaled Bulletins" "Large Bulletins" Back)
    [[ $selection ]] || return
    log_it "DEBUG menu_other -> $selection"
    case "$selection" in
        Bulletins) menu_wip;;
        "Scaled Bulletins") menu_wip;;
        "Large Bulletins") menu_wip;;
        *) return;;
    esac
}

menu_pages()
{
    #TODO Someday use a regex like in menu_copies to validate the pages entry
    p_pages=$(zenity --entry $z_looks --text="Pages:" --entry-text="$p_pages")
}

# Get File
# TODO: Could select --multiple & print individually
[[ ! $p_file ]] && p_file=$(zenity --file-selection $z_looks --text "File to print:")
[[ $p_file ]] || exit 0
log_it "DEBUG File selected: $p_file"

# Get Printer
printers=$(lpstat -a | awk '{print $1}')
p_printer=$(echo "$printers" | zenity --list $z_looks --column="Printer" \
                                      --text " File: $p_file\n\nSelect a printer")
[[ $p_printer ]] || exit 0
log_it "DEBUG Selected $p_printer"

menu_main

cmd=$(cmd_build)
log_it "DEBUG Command = $cmd"
zenity --info $z_looks --text="Printing:\n\n$cmd"
